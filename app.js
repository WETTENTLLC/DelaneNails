




























































































module.exports = app;app.use(globalErrorHandler);});  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));app.all('*', (req, res, next) => {app.use('/api/v1/reviews', reviewRouter);app.use('/api/v1/bookings', bookingRouter);app.use('/api/v1/users', userRouter);app.use('/api/v1/tours', tourRouter); // Add this line to the existing routes section of your app.js file// 3) ROUTES});  next();  req.requestTime = new Date().toISOString();app.use((req, res, next) => {// Test middlewareapp.use(express.static(path.join(__dirname, 'public')));// Serving static filesapp.use(compression()););  })    ]      'price'      'difficulty',      'maxGroupSize',      'ratingsAverage',      'ratingsQuantity',      'duration',    whitelist: [  hpp({app.use(// Prevent parameter pollutionapp.use(xss());// Data sanitization against XSSapp.use(mongoSanitize());// Data sanitization against NoSQL query injectionapp.use(cookieParser());app.use(express.urlencoded({ extended: true, limit: '10kb' }));app.use(express.json({ limit: '10kb' }));// Body parser, reading data from body into req.bodyapp.use('/api', limiter);});  message: 'Too many requests from this IP, please try again in an hour!'  windowMs: 60 * 60 * 1000,  max: 100,const limiter = rateLimit({// Limit requests from same API}  app.use(morgan('dev'));if (process.env.NODE_ENV === 'development') {// Development loggingapp.use(helmet());// Set security HTTP headersapp.options('*', cors());app.use(cors());// Implement CORS// 1) GLOBAL MIDDLEWARESapp.enable('trust proxy');const app = express();const reviewRouter = require('./routes/reviewRoutes');const bookingRouter = require('./routes/bookingRoutes');const userRouter = require('./routes/userRoutes');const globalErrorHandler = require('./controllers/errorController');const AppError = require('./utils/appError');const tourRouter = require('./routes/tourRoutes'); // Add this line to the existing routes section of your app.js fileconst compression = require('compression');const cookieParser = require('cookie-parser');const path = require('path');const cors = require('cors');const hpp = require('hpp');const xss = require('xss-clean');const mongoSanitize = require('express-mongo-sanitize');const helmet = require('helmet');const rateLimit = require('express-rate-limit');const morgan = require('morgan');const express = require('express');